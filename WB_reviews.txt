** 문제 정의 
- Cloud 환경에서 LAMP (Linux, Apache, MySQL, PHP) 
- 각 컴포넌트에 대해서 HA 구성 
- 확장성을 고려하여 구성 
- 다양한 컴포넌트들에 대해서 DR 을 고려해야 함. 
- 높은 throughput과 성능을 보장하는 DB와 데이터 접근 레이어를 구성 
- 글로벌한 유저들이 접속 하더라도 낮은 지연시간으로 응답해야함 
- http/1.1 이나 http/2 요청과 상관 없이 효과적으로 부하분산이 되어야 함 
- 서비스 인스턴스 장애로 부터 자체적으로 인프라가 복구되어야 함 
-  rest 나 전송에 있어서 데이터 보안이 이루어져야 함 
- 딜리버리 팀의 확장에 따라서 환경에 대한 접근제어가 되어야 함 
- 6개월 이상의 비활성 객체에 대한 아카이브 전략 
- 블루프린트 아키텍쳐를 사용해서 환경을 쉽게 복제하고 관리하기 위한 기능 
- 어플리케이션 라이프사이클 관리가 데브옵스 전략을 고려해서 생성되어야 함
- 비용 효율적으로 모든 컴포넌트 아키텍쳐가 구성되어야 함 
- 접근로그가 수집되고 시각화를 위해 집계되어야 함 

** 서비스 확인 
1) managed service 인가? 아닌가?
2) serverless service 인가? 아닌가?
3) VPC 내부 서비스인가? 아닌가?
4) 모든 서비스에 대해서.. 어떻게 Availability, Reliablity, Security, Performance를 보장하는가? 
5) 서비스인가 기능인가? 
6) CloudFront 에서 dynamic content 를 어떻게 가져오는가? 


-------------------------------------

3) 서비스 범위 분류 
- VPC 내부 
	. EC2 - web/app server 
	. RDS - 
	. Elastic Cache 
	. NAT GW 
	. 
- Regional Services
	. S3 bucket 
	. CloudFront Distribution 

- VPC 외부 
----------------------------------------------------
- 제가 오늘 말씀드릴 아키텍처는 AWS 클라우드 상에서 LAMP(linux, apache, mysql, php)로 구성된 웹 서비스를 구축하는 것 입니다. 
- AWS 클라우드는 글로벌 인프라 서비스를 제공합니다. 
- AWS 클라우드 인프라는 Region 및 가용영역을 중심으로 구축 되는데, 리전은 전 세계에 분산된 물리적 위치로써 현재 22개의 리전이 있습니다. 
- 각 리전은 여러 가용영역으로 구성되는데, 각 가용영역은 일반적으로 다수의 데이터 센터로 구성되어, 서로 분리된 전력, 네트워킹, 연결성을 갖추고 있습니다. 
- 먼저, AWS의 어느 리전에서 웹 서비스를 제공할 것인지 정해야 합니다. << REGION 그린다>>
- AWS는 VPC, Virtual Private Cloud 를 통해서 각 사용자에게 독립된 클라우드 공간을 제공합니다. VPC는 특정 Region 에 생성이 됩니다. << VPC를 그린다>> 
-해당 Region이 가지고 있는 여러 가용영역들에 걸쳐서 생성할 수 있습니다. 저는 2개의 가용영역을 사용하여 VPC를 구성하겠습니다. << 가용영역을 그린다 >> 
- VPC 내부의 AWS 리소스는 기본적으로 private IP를 통해서 서로 통신을 하게됩니다. 이를 위해서 CIDR를 통한 IP 주소 범위 정의, 서브넷 생성, 라우팅 테이블 등을 설정하여 가상 네트워킹 환경을 제어합니다. 
- 만약 VPC 내부의 AWS 리소스들이 외부 인터넷망에 접속 하기 위해서는 VPC에 Internet Gateway를 설정하여 public IP 를 할당 받을 수 있습니다. 
- VPC가 갖는 서브넷은 Public Subnet과 Private Subnet으로 나뉘게 됩니다. 
- Public Subnet은 외부 인터넷 망과 연결하기 위해 public IP가 필요한 AWS 리소스가 위치되게 되는데, IGW가 NAT, Network address translation을 통해서 IP를 할당받고 통신하게 됩니다. 
- 웹 서비스를 제공하기 위해서 3개의 서브넷을 생성 하는데 하나는 public subnet으로 다른 하나는 private 서브넷으로 생성하겠습니다. 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- 웹 서비스는 apache에 해당하는 WEB SERVER, php를 통해 동적 컨텐츠를 제공할 APP SERVER, 그리고 데이터를 저장할 MYSQL 로 구성을 하겠습니다. 그리고 WEB SERVER와 APP SERVER는 EC2를 통해서 구현하기 적합하고, MYSQL은 RDS를 통해 제공하도록 하겠습니다.  << EC2 , RDS 그린다 > 
- EC2는 Elastic Compute Cloud로써 AWS에서 사용할 수 있는 안전하고 규모 조정이 가능한 컴퓨팅 서비스입니다. 다양한 리소스 타입을 제공하며, 여러 서비스와 서로 연동시킬 수 있으며, 이따가 말씀드릴 auto scaling 기능을 통해서 자동으로 확장할 수 있습니다.  auto scaling 을 사용하기 위해서는 각 EC2 인스턴스의 최신의 AMI, amazon machine image가 필요합니다. 이를  이용해 자동으로 EC2를 확장해줍니다. << EC2-WEB/APP 그린다 >> 
- RDS 는 Relational Database Service의 약자로 친숙한 RDB 엔진, oracle 이라던가, MySQL, PostgreSQL, MSSQL 그리고 Aurora를 DB엔진으로 사용할 수 있습니다.  RDS는 master-slave 구성으로 simple component failure를 예방할 수 있습니다. 또한 read replica 를  둠으로써, 성능향상 및 < RDS 그린다 >> 
- 일단 서비스를 위한 AWS 리소스는 그렸는데, 이것들이 서로 연결 될 수 있어야 겠죠. 
- 외부에서 IGW 를 통해서 사용자 요청이 들어온다고 할때, 여러대의 EC2 인스턴스에게 로드 밸런싱 하기 위해서 ELB, Elastic Load Balancing가 필요합니다. 
- ELB는 3가지 종류가 있는데, HTTP/HTTPS 와 같은 요청을 처리하기 위한 L7 로드밸런서 역할을 수행하는 Application Load Balancer, 그리고 L4의 로드 밸런서의 역할을 하면서 고속의 밸런싱처리나 TCP/UDP를 처리하는 Network Load Balancer.. 그리고 마지막으로 EC2-Classic의 로드 밸런싱이 가능한 이전버전의 로드 밸런서의 해당하는 Classic Load Balancer가 있습니다. 
- 여기서는 주로 외부 사용자에게 HTTP에 대한 요청이 올것임으로 ALB를 사용하여 로드밸런싱을 하겠습니다. ALB는 두 개 이상의 가용영역을 선택해야 하고, 해당 가용영역의 어떤 서브넷으로 요청을 전달 해야 하는지 설정해야 합니다. 
-웹 서버를 위한 ALB는 internet faced를 체크하여 public IP를 할당 받도록 하고, 앱 서버를 위한 ALB는 체크하지 않고 private ip를 사용하여 통신하도록 하겠습니다. . << ALB 그리고 EC2 연결>> 
- RDS에 대한 접근을 설정하기에 앞서, 사용자가 어떻게 VPC 내부의 리소스에 트래픽을 전달 하는지 알아보도록 하겠습니다. 
- 외부 사용자가 AWS 서비스에 접근 할 때에는 일반적으로 Domain Name을 사용하여 접근하게 됩니다. AWS는 Route53을 통해서 DNS, Domain Name System 웹 서비스를 제공합니다. Route53을 통해서 flow control, latency 기반 라우팅, 지역 DNS, 가중치 기반 라우팅 등을 사용할 수 있습니다.  << Route53 그린다 >> 
- RDS는 도메인 이름을 이용하여 부하에 대한 분산을 처리할 수 있습니다. update, delete 와 같이 master에 대해서 처리해야 하는 요청은 master.rds.com으로 
데이터 조회를 위한 요청은 read.rds.com으로 접근하여 부하 분산이 이루어질 수 있도록 구성하겠습니다.  <도메인 이름, flow 그린다.> 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- 여기까지 하게되면, 각 리소스간에 연결은 다 되었으나 보안에 대한 고려가 되지 않았습니다. 
- 각 서브넷은 ACLs 를 설정할 수 있습니다. 별도로 설정하지 않으면 모든 트래픽에 대해서 허용하도록 구성되어 있습니다. 
- 각 인스턴스 별로 Security Group을 설정하여 Inbound/Outbound rule을 정의 할 수 있는데, 최소 권한 원칙에 따라서 필요한 요청에 대해서만 설정하고, 각 레이어 별 리소스 그룹에 대해서 보안그룹을 적용하도록 하겠습니다. <ELB, EC2, RDS 보안그룹 설정> 
- 추가적으로 성능 향상을 위해서 RDS에 데이터를 매번 쿼리하거나 업데이트 하는 것 보다 application level의 cache를 두어 데이터 또는 메타정보를 저장함으로써 application을 향상 시킬 수 있습니다. AWS 는 ElasticCache라는 인 메모리 캐시를 손쉽게 배포, 운영 및 조정할 수 있게 해주는
웹 서비스를 제공합니다. 크게 Memcached / Redis 를 제공하는데 완전관리형에 확장 가능한 Redis를 사용하도록 하겠습니다. <<ElasticCache 그림>> 
- EBS,Elastic Block Storage는 EC2 인스턴스에 사용할 영구 블록 스토리지 볼륨을 제공합니다. EBS 볼륨은 가용 영역 내에 자동으로 복제되어 장애로부터 보호하고, 고가용성 및 내구성을 제공합니다. EBS는 크게 SSD, HDD 타입으로 나뉘며  각각( , ,  , , )로 나뉘는데, 사용용도, 데이터 저장비용과 요구되는 IOPS에 따라서 선택할 수 있습니다. EBS는 Data lifecycle manager를 통해서 자동으로 스냅샷 생성을 통해 EBS 볼륨 백업을 자동화할 수 있습니다. 
- EBS 스냅샷은 S3 웹 인터페이스를 통해 0바이트부터 5테라까지 데이터를 object 단위로 저장할 수 있는 오브젝트 스토리지인 s3에 저장을 할 수 있습니다. s3는 simple storage service로 매우 높은 지속성, 고가용성, 무한대에 가까운 데이터 확장성을 매우 낮은 가격에 제공해줍니다. 
- S3는 여러개의 storage class를 제공하고 있는데, 범용 목적을 위한 S3 standard, 두 개의 계층으로 나뉘어 하나의 액세스는 빈번한 액세스를 처리하고 다른 하나는 저렴하고 빈번하지 않은 액세스 패턴을 처리하는 S3 Intelligent Tiering.. 그리고 빈번하지 않은 액세스를 처리하기 위한 standard-IA, IA를 하나의 zone에서 제공하기 위한 one zone-IA 그리고 데이터 아카이빙을 위한 S3 Glacier와 S3 Glacier Deep Archive 를 지원합니다. 
- EBS의 snapshot을 저장하기 위해서 적합한 S3 storage class로 S3 IA를 사용하여 EBS 스냅샷을 저장합니다. 마찬가지로 RDS에서 저장되는 Snapshot에 대해서 동일하게 S3에 저장해 줍니다. 
- 반면에 EC2에서 생성되는 로그 데이터를 S3에 저장할 수 있는데, 최신의 로그 정보는 자주 조회 될 수 있음으로 standard IA를 통해서 저장하고, 
S3 Lifecycle을 설정하여 일정 기간이 지난 로그들은 S3 glacier 로 저장하도록 설정할 수 있습니다. 
- 이렇게 만들어진 웹 서비스가 위치한 region과 굉장히 멀리 떨어진 글로벌 유저들이 웹페이지에 접속하고자 할때는 
CloudFront를 사용하여 CDN,  content delivery network 서비스로 보안적으로 데이터, 비디오, 어플리케이션 API들을 낮은 latency로 글로벌 고객에게 제공합니다.. CloudFront는 Edge Location을 통해 AWS 백본 네트워크를 사용하여 글로벌 유저들에게 서비스를 더 빠르게 제공하게 되며, AWS Shield 를 통해서 DDoS 공격을 방지할 수도 있습니다. 저희는 사용자에게 웹 서비스를 제공해야 함으로 web distribution을 생성하여 
static+dynamic content를 제공할 수 있으며 static content를 위한 origion은 S3 버켓을 선택하고, dynamic content를 위한 origin은 웹 서버를 위한 ALB로 설정하여 사용자 요청을 처리합니다. 이때의 S3는 Intelligent Tiering 스토리지를 클래스로 버켓을 생성하여 효율적으로 처리될 수 있도록 합니다.  
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- 이렇게 만들어진 AWS 리소스들은 CloudFormation을 통해서 Infrastructure as code로써 제공될 수 있습니다. 
CloudFormation template 생성을 통해서  AWS 서비스를 프로비저닝하는 순서나 이러한 종속성을 적용하기 위한 세부 요소를 파악할 필요가 없게 됩니다.
- 앞서 말씀 드렸던 CloudWatch는 AWS 리소스와 AWS에서 실행되는 application을 모니터링하기 위한 서비스로, 
지표 및 로그 수집을 통해 리소스들을 모니터링하고 SNS, Simple Notification Service를 통해 알람을 설정할 수 있습니다.  
- CloudTrail은 AWS 계정에 대한 거버넌스, 컴플라이언스, 감사정보를 제공하기 위한 서비스로, 계정에 대한 AWS API 호출을 기록하고 로그파일을 사용자에게 전달합니다. 
- CloudTrail을 통해서 IAM의 권한 관리와 같은 로그도 확인이 가능합니다. IAM은 AWS 서비스와 리소스에 대한 접근을 관리하여 보안을 강화하기위한 서비스이다. AWS 사용자와 그룹을 생성하고 권한적용을 통해 AWS 리소스에 대한 접근을 허용/거부 할 수 있습니다. 또 외부사용자들의 접근 제어를 위해 role을 생성하여 임시 권한을 부여할 수도 있습니다. 
- 이러한 서비스들은 AWS 리소스를 관리하는 관리자들에 의해서 사용이 되게 되며, AWS 서비스들 중에서는 CI/CD를 위한 서비스들도 존재합니다. 
- CodePipline은 사용자가 정의한 릴리스 프로세스 모델에 따라 코드가 변경될 때마다 코드 빌드/테스트/배포를 수행합니다. 이를 통해 application 및 인프라를 빠르고 안정적으로 업데이트할 수 있습니다. 
- CodeCommit은 완전관리형 소스 제어 서비스로써, 확장성이 뛰어난 프라이빗 git repository를 호스팅 할 수 있게 해줍니다. 
- CodeBuild는 소스 코드를 컴파일하고 테스트를 실행하며 배포 준비가 완료된 소프트웨어 패키지를 생성하는 완전관리형 빌드 서비스입니다. 이를 사용하면 자체 빌드 서버를 프로비저닝, 관리 및 확장할 필요가 없습니다
-  CodeDeploy는 EC2 인스턴스와 온프레미스에서 실행되는 인스턴스를 비롯한 모든 인스턴스에 코드를 배포하는 작업을 자동화하는 서비스입니다.
이를 사용하면 새로운 기능을 더욱 쉽고 빠르게 출시할 수 있고, 애플리케이션을 배포하는 동안 가동 중지 시간을 줄이는 데 도움이 되며, 복잡한 애플리케이션 업데이트 작업을 처리할 수 있습니다.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- 추가적으로 웹서비스의 목적에 따라서 웹서버 로그/앱서버 로그의 클릭 스트림 정보 등을 파악하여 사용자의 행동패턴 등을 분석할 수 있습니다. 
이를 위해서 Kinesis firehose를 통해 웹 로그를 수집하여 간단한 처리 후 특정 S3 버킷에 저장할 수 있습니다. Kinesis는 실시간 데이터, 스트리밍 데이터에 대해서 수집, 처리, 분석할 수 있는 서비스로 용도와 목적에 따라서 Kinesis Data stream, Kinesis Data firehose, Kinesis Data analytics, Kinesis Video Data stream이 있습니다. 
- S3에 저장된 가공된 데이터는 Athena으로 표준 SQL을 사용하여 interactive하게 쿼리할 수 있습니다. Athena는 서버리스 서비스로 인프라에 대한 관리가 필요 없으며, S3로 부터 별도의 데이터 로드 없이 처리 가능합니다. Athena는 Glue와 통합되어 데이터에 대한 메타 관리를 수행할 수 있습니다. 
- Athena로 쿼리한 데이터는 QuickSight를 통해서 시빠르고, 쉽게 클라우드 환경에서 시각화를 통해 비즈니스 분석을 수행할 수 잇습니다. 
QuickSight는 Athena 뿐만 아니라 S3, RDS, Rdshift, Aurora 의 서비스들에 대해서 소스 시스템 설저앟여 시각화를 수행할 수 있다. 





